/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Candidate as PrismaCandidate,
  Comparison as PrismaComparison,
  JobProfile as PrismaJobProfile,
} from "@prisma/client";

export class CandidateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CandidateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.candidate.count(args);
  }

  async candidates(
    args: Prisma.CandidateFindManyArgs
  ): Promise<PrismaCandidate[]> {
    return this.prisma.candidate.findMany(args);
  }
  async candidate(
    args: Prisma.CandidateFindUniqueArgs
  ): Promise<PrismaCandidate | null> {
    return this.prisma.candidate.findUnique(args);
  }
  async createCandidate(
    args: Prisma.CandidateCreateArgs
  ): Promise<PrismaCandidate> {
    return this.prisma.candidate.create(args);
  }
  async updateCandidate(
    args: Prisma.CandidateUpdateArgs
  ): Promise<PrismaCandidate> {
    return this.prisma.candidate.update(args);
  }
  async deleteCandidate(
    args: Prisma.CandidateDeleteArgs
  ): Promise<PrismaCandidate> {
    return this.prisma.candidate.delete(args);
  }

  async findComparisons(
    parentId: string,
    args: Prisma.ComparisonFindManyArgs
  ): Promise<PrismaComparison[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comparisons(args);
  }

  async getJobProfile(parentId: string): Promise<PrismaJobProfile | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .jobProfile();
  }
}
