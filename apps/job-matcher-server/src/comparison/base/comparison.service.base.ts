/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Comparison as PrismaComparison,
  Candidate as PrismaCandidate,
  JobProfile as PrismaJobProfile,
} from "@prisma/client";

import { ComparisonInput } from "../ComparisonInput";

export class ComparisonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComparisonCountArgs, "select">
  ): Promise<number> {
    return this.prisma.comparison.count(args);
  }

  async comparisons(
    args: Prisma.ComparisonFindManyArgs
  ): Promise<PrismaComparison[]> {
    return this.prisma.comparison.findMany(args);
  }
  async comparison(
    args: Prisma.ComparisonFindUniqueArgs
  ): Promise<PrismaComparison | null> {
    return this.prisma.comparison.findUnique(args);
  }
  async createComparison(
    args: Prisma.ComparisonCreateArgs
  ): Promise<PrismaComparison> {
    return this.prisma.comparison.create(args);
  }
  async updateComparison(
    args: Prisma.ComparisonUpdateArgs
  ): Promise<PrismaComparison> {
    return this.prisma.comparison.update(args);
  }
  async deleteComparison(
    args: Prisma.ComparisonDeleteArgs
  ): Promise<PrismaComparison> {
    return this.prisma.comparison.delete(args);
  }

  async getCandidate(parentId: string): Promise<PrismaCandidate | null> {
    return this.prisma.comparison
      .findUnique({
        where: { id: parentId },
      })
      .candidate();
  }

  async getJobProfile(parentId: string): Promise<PrismaJobProfile | null> {
    return this.prisma.comparison
      .findUnique({
        where: { id: parentId },
      })
      .jobProfile();
  }
  async CompareSkills(args: ComparisonInput): Promise<string> {
    throw new Error("Not implemented");
  }
}
