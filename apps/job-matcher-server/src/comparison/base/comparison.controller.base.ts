/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ComparisonService } from "../comparison.service";
import { ComparisonCreateInput } from "./ComparisonCreateInput";
import { Comparison } from "./Comparison";
import { ComparisonFindManyArgs } from "./ComparisonFindManyArgs";
import { ComparisonWhereUniqueInput } from "./ComparisonWhereUniqueInput";
import { ComparisonUpdateInput } from "./ComparisonUpdateInput";
import { ComparisonInput } from "../ComparisonInput";

export class ComparisonControllerBase {
  constructor(protected readonly service: ComparisonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Comparison })
  async createComparison(
    @common.Body() data: ComparisonCreateInput
  ): Promise<Comparison> {
    return await this.service.createComparison({
      data: {
        ...data,

        candidate: data.candidate
          ? {
              connect: data.candidate,
            }
          : undefined,

        jobProfile: data.jobProfile
          ? {
              connect: data.jobProfile,
            }
          : undefined,
      },
      select: {
        candidate: {
          select: {
            id: true,
          },
        },

        comparisonResult: true,
        createdAt: true,
        id: true,

        jobProfile: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Comparison] })
  @ApiNestedQuery(ComparisonFindManyArgs)
  async comparisons(@common.Req() request: Request): Promise<Comparison[]> {
    const args = plainToClass(ComparisonFindManyArgs, request.query);
    return this.service.comparisons({
      ...args,
      select: {
        candidate: {
          select: {
            id: true,
          },
        },

        comparisonResult: true,
        createdAt: true,
        id: true,

        jobProfile: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Comparison })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async comparison(
    @common.Param() params: ComparisonWhereUniqueInput
  ): Promise<Comparison | null> {
    const result = await this.service.comparison({
      where: params,
      select: {
        candidate: {
          select: {
            id: true,
          },
        },

        comparisonResult: true,
        createdAt: true,
        id: true,

        jobProfile: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Comparison })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateComparison(
    @common.Param() params: ComparisonWhereUniqueInput,
    @common.Body() data: ComparisonUpdateInput
  ): Promise<Comparison | null> {
    try {
      return await this.service.updateComparison({
        where: params,
        data: {
          ...data,

          candidate: data.candidate
            ? {
                connect: data.candidate,
              }
            : undefined,

          jobProfile: data.jobProfile
            ? {
                connect: data.jobProfile,
              }
            : undefined,
        },
        select: {
          candidate: {
            select: {
              id: true,
            },
          },

          comparisonResult: true,
          createdAt: true,
          id: true,

          jobProfile: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Comparison })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteComparison(
    @common.Param() params: ComparisonWhereUniqueInput
  ): Promise<Comparison | null> {
    try {
      return await this.service.deleteComparison({
        where: params,
        select: {
          candidate: {
            select: {
              id: true,
            },
          },

          comparisonResult: true,
          createdAt: true,
          id: true,

          jobProfile: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/compare-skills")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CompareSkills(
    @common.Body()
    body: ComparisonInput
  ): Promise<string> {
    return this.service.CompareSkills(body);
  }
}
