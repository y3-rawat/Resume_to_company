/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobProfile } from "./JobProfile";
import { JobProfileCountArgs } from "./JobProfileCountArgs";
import { JobProfileFindManyArgs } from "./JobProfileFindManyArgs";
import { JobProfileFindUniqueArgs } from "./JobProfileFindUniqueArgs";
import { CreateJobProfileArgs } from "./CreateJobProfileArgs";
import { UpdateJobProfileArgs } from "./UpdateJobProfileArgs";
import { DeleteJobProfileArgs } from "./DeleteJobProfileArgs";
import { CandidateFindManyArgs } from "../../candidate/base/CandidateFindManyArgs";
import { Candidate } from "../../candidate/base/Candidate";
import { CompanyFindManyArgs } from "../../company/base/CompanyFindManyArgs";
import { Company } from "../../company/base/Company";
import { ComparisonFindManyArgs } from "../../comparison/base/ComparisonFindManyArgs";
import { Comparison } from "../../comparison/base/Comparison";
import { JobProfileService } from "../jobProfile.service";
@graphql.Resolver(() => JobProfile)
export class JobProfileResolverBase {
  constructor(protected readonly service: JobProfileService) {}

  async _jobProfilesMeta(
    @graphql.Args() args: JobProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobProfile])
  async jobProfiles(
    @graphql.Args() args: JobProfileFindManyArgs
  ): Promise<JobProfile[]> {
    return this.service.jobProfiles(args);
  }

  @graphql.Query(() => JobProfile, { nullable: true })
  async jobProfile(
    @graphql.Args() args: JobProfileFindUniqueArgs
  ): Promise<JobProfile | null> {
    const result = await this.service.jobProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobProfile)
  async createJobProfile(
    @graphql.Args() args: CreateJobProfileArgs
  ): Promise<JobProfile> {
    return await this.service.createJobProfile({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => JobProfile)
  async updateJobProfile(
    @graphql.Args() args: UpdateJobProfileArgs
  ): Promise<JobProfile | null> {
    try {
      return await this.service.updateJobProfile({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobProfile)
  async deleteJobProfile(
    @graphql.Args() args: DeleteJobProfileArgs
  ): Promise<JobProfile | null> {
    try {
      return await this.service.deleteJobProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Candidate], { name: "candidates" })
  async findCandidates(
    @graphql.Parent() parent: JobProfile,
    @graphql.Args() args: CandidateFindManyArgs
  ): Promise<Candidate[]> {
    const results = await this.service.findCandidates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Company], { name: "companies" })
  async findCompanies(
    @graphql.Parent() parent: JobProfile,
    @graphql.Args() args: CompanyFindManyArgs
  ): Promise<Company[]> {
    const results = await this.service.findCompanies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Comparison], { name: "comparisons" })
  async findComparisons(
    @graphql.Parent() parent: JobProfile,
    @graphql.Args() args: ComparisonFindManyArgs
  ): Promise<Comparison[]> {
    const results = await this.service.findComparisons(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(
    @graphql.Parent() parent: JobProfile
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
